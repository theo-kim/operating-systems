From 116736aff4ff9b5e97e0ce043f6f0c55d341e911 Mon Sep 17 00:00:00 2001
From: Theodore Kim <tk1931@nyu.edu>
Date: Sun, 4 Nov 2018 01:27:26 -0500
Subject: [PATCH] Implement Data System Calls

---
 Makefile    |  65 ++-------------------------------
 README      |   2 +-
 bio.c       |  20 +++++-----
 bootmain.c  |   2 +-
 buf.h       |   4 +-
 console.c   |  24 +++++-------
 date.c      |  26 +++++++++++++
 date.h      |  12 +++---
 defs.h      |   4 +-
 fs.c        |  28 +++++++-------
 fs.h        |  21 +++++------
 grep.c      |   3 +-
 ide.c       |  24 ++++--------
 kill.c      |   2 +-
 log.c       |  26 ++++++-------
 main.c      |   1 +
 memide.c    |  13 +++----
 memlayout.h |   2 +-
 mkfs.c      | 103 ++++++++++++++++++++++++++--------------------------
 param.h     |   3 +-
 proc.c      |   9 +----
 sign.pl     |   0
 syscall.c   |  31 ++++++++++++++++
 syscall.h   |   2 +
 sysproc.c   |  14 +++++++
 user.h      |   3 ++
 usys.S      |   1 +
 vectors.pl  |   0
 x86.h       |   6 ---
 29 files changed, 222 insertions(+), 229 deletions(-)
 create mode 100644 date.c
 mode change 100755 => 100644 sign.pl
 mode change 100755 => 100644 vectors.pl

diff --git a/Makefile b/Makefile
index b4fd9a2..cde7200 100644
--- a/Makefile
+++ b/Makefile
@@ -97,7 +97,7 @@ bootblock: bootasm.S bootmain.c
 	$(LD) $(LDFLAGS) -N -e start -Ttext 0x7C00 -o bootblock.o bootasm.o bootmain.o
 	$(OBJDUMP) -S bootblock.o > bootblock.asm
 	$(OBJCOPY) -S -O binary -j .text bootblock.o bootblock
-	./sign.pl bootblock
+	perl sign.pl bootblock
 
 entryother: entryother.S
 	$(CC) $(CFLAGS) -fno-pic -nostdinc -I. -c entryother.S
@@ -172,6 +172,7 @@ UPROGS=\
 	_usertests\
 	_wc\
 	_zombie\
+	_date\
 
 fs.img: mkfs README $(UPROGS)
 	./mkfs fs.img README $(UPROGS)
@@ -185,22 +186,8 @@ clean:
 	.gdbinit \
 	$(UPROGS)
 
-# make a printout
-FILES = $(shell grep -v '^\#' runoff.list)
-PRINT = runoff.list runoff.spec README toc.hdr toc.ftr $(FILES)
-
-xv6.pdf: $(PRINT)
-	./runoff
-	ls -l xv6.pdf
-
-print: xv6.pdf
-
 # run in emulators
 
-bochs : fs.img xv6.img
-	if [ ! -e .bochsrc ]; then ln -s dot-bochsrc .bochsrc; fi
-	bochs -q
-
 # try to generate a unique GDB port
 GDBPORT = $(shell expr `id -u` % 5000 + 25000)
 # QEMU's gdb stub command line changed in 0.11
@@ -208,9 +195,9 @@ QEMUGDB = $(shell if $(QEMU) -help | grep -q '^-gdb'; \
 	then echo "-gdb tcp::$(GDBPORT)"; \
 	else echo "-s -p $(GDBPORT)"; fi)
 ifndef CPUS
-CPUS := 2
+CPUS := 1
 endif
-QEMUOPTS = -hdb fs.img xv6.img -smp $(CPUS) -m 512 $(QEMUEXTRA)
+QEMUOPTS = -hdb fs.img xv6.img -smp $(CPUS) -m 512 $(QEMUEXTRA) -display none
 
 qemu: fs.img xv6.img
 	$(QEMU) -serial mon:stdio $(QEMUOPTS)
@@ -231,47 +218,3 @@ qemu-gdb: fs.img xv6.img .gdbinit
 qemu-nox-gdb: fs.img xv6.img .gdbinit
 	@echo "*** Now run 'gdb'." 1>&2
 	$(QEMU) -nographic $(QEMUOPTS) -S $(QEMUGDB)
-
-# CUT HERE
-# prepare dist for students
-# after running make dist, probably want to
-# rename it to rev0 or rev1 or so on and then
-# check in that version.
-
-EXTRA=\
-	mkfs.c ulib.c user.h cat.c echo.c forktest.c grep.c kill.c\
-	ln.c ls.c mkdir.c rm.c stressfs.c usertests.c wc.c zombie.c\
-	printf.c umalloc.c\
-	README dot-bochsrc *.pl toc.* runoff runoff1 runoff.list\
-	.gdbinit.tmpl gdbutil\
-
-dist:
-	rm -rf dist
-	mkdir dist
-	for i in $(FILES); \
-	do \
-		grep -v PAGEBREAK $$i >dist/$$i; \
-	done
-	sed '/CUT HERE/,$$d' Makefile >dist/Makefile
-	echo >dist/runoff.spec
-	cp $(EXTRA) dist
-
-dist-test:
-	rm -rf dist
-	make dist
-	rm -rf dist-test
-	mkdir dist-test
-	cp dist/* dist-test
-	cd dist-test; $(MAKE) print
-	cd dist-test; $(MAKE) bochs || true
-	cd dist-test; $(MAKE) qemu
-
-# update this rule (change rev#) when it is time to
-# make a new revision.
-tar:
-	rm -rf /tmp/xv6
-	mkdir -p /tmp/xv6
-	cp dist/* dist/.gdbinit.tmpl /tmp/xv6
-	(cd /tmp; tar cf - xv6) | gzip >xv6-rev9.tar.gz  # the next one will be 9 (6/27/15)
-
-.PHONY: dist-test dist
diff --git a/README b/README
index 1528948..5d04bb9 100644
--- a/README
+++ b/README
@@ -6,7 +6,7 @@ ACKNOWLEDGMENTS
 
 xv6 is inspired by John Lions's Commentary on UNIX 6th Edition (Peer
 to Peer Communications; ISBN: 1-57398-013-7; 1st edition (June 14,
-2000)). See also http://pdos.csail.mit.edu/6.828/2014/xv6.html, which
+2000)). See also http://pdos.csail.mit.edu/6.828/2012/v6.html, which
 provides pointers to on-line resources for v6.
 
 xv6 borrows code from the following sources:
diff --git a/bio.c b/bio.c
index 629bb2c..6a28053 100644
--- a/bio.c
+++ b/bio.c
@@ -24,7 +24,6 @@
 #include "defs.h"
 #include "param.h"
 #include "spinlock.h"
-#include "fs.h"
 #include "buf.h"
 
 struct {
@@ -56,20 +55,20 @@ binit(void)
   }
 }
 
-// Look through buffer cache for block on device dev.
+// Look through buffer cache for sector on device dev.
 // If not found, allocate a buffer.
 // In either case, return B_BUSY buffer.
 static struct buf*
-bget(uint dev, uint blockno)
+bget(uint dev, uint sector)
 {
   struct buf *b;
 
   acquire(&bcache.lock);
 
  loop:
-  // Is the block already cached?
+  // Is the sector already cached?
   for(b = bcache.head.next; b != &bcache.head; b = b->next){
-    if(b->dev == dev && b->blockno == blockno){
+    if(b->dev == dev && b->sector == sector){
       if(!(b->flags & B_BUSY)){
         b->flags |= B_BUSY;
         release(&bcache.lock);
@@ -86,7 +85,7 @@ bget(uint dev, uint blockno)
   for(b = bcache.head.prev; b != &bcache.head; b = b->prev){
     if((b->flags & B_BUSY) == 0 && (b->flags & B_DIRTY) == 0){
       b->dev = dev;
-      b->blockno = blockno;
+      b->sector = sector;
       b->flags = B_BUSY;
       release(&bcache.lock);
       return b;
@@ -95,16 +94,15 @@ bget(uint dev, uint blockno)
   panic("bget: no buffers");
 }
 
-// Return a B_BUSY buf with the contents of the indicated block.
+// Return a B_BUSY buf with the contents of the indicated disk sector.
 struct buf*
-bread(uint dev, uint blockno)
+bread(uint dev, uint sector)
 {
   struct buf *b;
 
-  b = bget(dev, blockno);
-  if(!(b->flags & B_VALID)) {
+  b = bget(dev, sector);
+  if(!(b->flags & B_VALID))
     iderw(b);
-  }
   return b;
 }
 
diff --git a/bootmain.c b/bootmain.c
index 97d5258..d24bf66 100644
--- a/bootmain.c
+++ b/bootmain.c
@@ -1,6 +1,6 @@
 // Boot loader.
 // 
-// Part of the boot block, along with bootasm.S, which calls bootmain().
+// Part of the boot sector, along with bootasm.S, which calls bootmain().
 // bootasm.S has put the processor into protected 32-bit mode.
 // bootmain() loads an ELF kernel image from the disk starting at
 // sector 1 and then jumps to the kernel entry routine.
diff --git a/buf.h b/buf.h
index f18fd87..9c586f2 100644
--- a/buf.h
+++ b/buf.h
@@ -1,11 +1,11 @@
 struct buf {
   int flags;
   uint dev;
-  uint blockno;
+  uint sector;
   struct buf *prev; // LRU cache list
   struct buf *next;
   struct buf *qnext; // disk queue
-  uchar data[BSIZE];
+  uchar data[512];
 };
 #define B_BUSY  0x1  // buffer is locked by some process
 #define B_VALID 0x2  // buffer has been read from disk
diff --git a/console.c b/console.c
index 35f221d..766dc30 100644
--- a/console.c
+++ b/console.c
@@ -143,9 +143,6 @@ cgaputc(int c)
     if(pos > 0) --pos;
   } else
     crt[pos++] = (c&0xff) | 0x0700;  // black on white
-
-  if(pos < 0 || pos > 25*80)
-    panic("pos under/overflow");
   
   if((pos/80) >= 24){  // Scroll up.
     memmove(crt, crt+80, sizeof(crt[0])*23*80);
@@ -178,6 +175,7 @@ consputc(int c)
 
 #define INPUT_BUF 128
 struct {
+  struct spinlock lock;
   char buf[INPUT_BUF];
   uint r;  // Read index
   uint w;  // Write index
@@ -189,13 +187,13 @@ struct {
 void
 consoleintr(int (*getc)(void))
 {
-  int c, doprocdump = 0;
+  int c;
 
-  acquire(&cons.lock);
+  acquire(&input.lock);
   while((c = getc()) >= 0){
     switch(c){
     case C('P'):  // Process listing.
-      doprocdump = 1;   // procdump() locks cons.lock indirectly; invoke later
+      procdump();
       break;
     case C('U'):  // Kill line.
       while(input.e != input.w &&
@@ -223,10 +221,7 @@ consoleintr(int (*getc)(void))
       break;
     }
   }
-  release(&cons.lock);
-  if(doprocdump) {
-    procdump();  // now call procdump() wo. cons.lock held
-  }
+  release(&input.lock);
 }
 
 int
@@ -237,15 +232,15 @@ consoleread(struct inode *ip, char *dst, int n)
 
   iunlock(ip);
   target = n;
-  acquire(&cons.lock);
+  acquire(&input.lock);
   while(n > 0){
     while(input.r == input.w){
       if(proc->killed){
-        release(&cons.lock);
+        release(&input.lock);
         ilock(ip);
         return -1;
       }
-      sleep(&input.r, &cons.lock);
+      sleep(&input.r, &input.lock);
     }
     c = input.buf[input.r++ % INPUT_BUF];
     if(c == C('D')){  // EOF
@@ -261,7 +256,7 @@ consoleread(struct inode *ip, char *dst, int n)
     if(c == '\n')
       break;
   }
-  release(&cons.lock);
+  release(&input.lock);
   ilock(ip);
 
   return target - n;
@@ -286,6 +281,7 @@ void
 consoleinit(void)
 {
   initlock(&cons.lock, "console");
+  initlock(&input.lock, "input");
 
   devsw[CONSOLE].write = consolewrite;
   devsw[CONSOLE].read = consoleread;
diff --git a/date.c b/date.c
new file mode 100644
index 0000000..6779af6
--- /dev/null
+++ b/date.c
@@ -0,0 +1,26 @@
+#include "types.h"
+#include "user.h"
+#include "date.h"
+
+int
+main(int argc, char *argv[])
+{
+	struct rtcdate r;
+	int i = date(&r);
+	if (i != 0) {
+		printf(2, "date failed\n");
+		exit();
+	}
+
+	// Date currently in UTC, convert to EST
+	if (r.hour < 5) {
+		r.hour = 24 - (5 - r.hour);
+		r.day = r.day - 1;
+	}
+	else {
+		r.hour -= 5;
+	}
+  	printf(1, "%d-%d-%d %d:%d:%d\n", r.year, r.month, r.day, r.hour, r.minute, r.second);
+
+	exit();
+}
\ No newline at end of file
diff --git a/date.h b/date.h
index 94aec4b..dd8f4b0 100644
--- a/date.h
+++ b/date.h
@@ -1,8 +1,8 @@
 struct rtcdate {
-  uint second;
-  uint minute;
-  uint hour;
-  uint day;
-  uint month;
-  uint year;
+	uint second;
+	uint minute;
+	uint hour;
+	uint day;
+	uint month;
+	uint year;
 };
diff --git a/defs.h b/defs.h
index b47372b..43431e3 100644
--- a/defs.h
+++ b/defs.h
@@ -39,7 +39,7 @@ int             dirlink(struct inode*, char*, uint);
 struct inode*   dirlookup(struct inode*, char*, uint*);
 struct inode*   ialloc(uint, short);
 struct inode*   idup(struct inode*);
-void            iinit(int dev);
+void            iinit(void);
 void            ilock(struct inode*);
 void            iput(struct inode*);
 void            iunlock(struct inode*);
@@ -81,7 +81,7 @@ void            lapicstartap(uchar, uint);
 void            microdelay(int);
 
 // log.c
-void            initlog(int dev);
+void            initlog(void);
 void            log_write(struct buf*);
 void            begin_op();
 void            end_op();
diff --git a/fs.c b/fs.c
index 025b326..1803cb4 100644
--- a/fs.c
+++ b/fs.c
@@ -16,13 +16,12 @@
 #include "mmu.h"
 #include "proc.h"
 #include "spinlock.h"
-#include "fs.h"
 #include "buf.h"
+#include "fs.h"
 #include "file.h"
 
 #define min(a, b) ((a) < (b) ? (a) : (b))
 static void itrunc(struct inode*);
-struct superblock sb;   // there should be one per dev, but we run with one dev
 
 // Read the super block.
 void
@@ -55,10 +54,12 @@ balloc(uint dev)
 {
   int b, bi, m;
   struct buf *bp;
+  struct superblock sb;
 
   bp = 0;
+  readsb(dev, &sb);
   for(b = 0; b < sb.size; b += BPB){
-    bp = bread(dev, BBLOCK(b, sb));
+    bp = bread(dev, BBLOCK(b, sb.ninodes));
     for(bi = 0; bi < BPB && b + bi < sb.size; bi++){
       m = 1 << (bi % 8);
       if((bp->data[bi/8] & m) == 0){  // Is block free?
@@ -79,10 +80,11 @@ static void
 bfree(int dev, uint b)
 {
   struct buf *bp;
+  struct superblock sb;
   int bi, m;
 
   readsb(dev, &sb);
-  bp = bread(dev, BBLOCK(b, sb));
+  bp = bread(dev, BBLOCK(b, sb.ninodes));
   bi = b % BPB;
   m = 1 << (bi % 8);
   if((bp->data[bi/8] & m) == 0)
@@ -99,8 +101,8 @@ bfree(int dev, uint b)
 // its size, the number of links referring to it, and the
 // list of blocks holding the file's content.
 //
-// The inodes are laid out sequentially on disk at
-// sb.startinode. Each inode has a number, indicating its
+// The inodes are laid out sequentially on disk immediately after
+// the superblock. Each inode has a number, indicating its
 // position on the disk.
 //
 // The kernel keeps a cache of in-use inodes in memory
@@ -160,12 +162,9 @@ struct {
 } icache;
 
 void
-iinit(int dev)
+iinit(void)
 {
   initlock(&icache.lock, "icache");
-  readsb(dev, &sb);
-  cprintf("sb: size %d nblocks %d ninodes %d nlog %d logstart %d inodestart %d bmap start %d\n", sb.size,
-          sb.nblocks, sb.ninodes, sb.nlog, sb.logstart, sb.inodestart, sb.bmapstart);
 }
 
 static struct inode* iget(uint dev, uint inum);
@@ -179,9 +178,12 @@ ialloc(uint dev, short type)
   int inum;
   struct buf *bp;
   struct dinode *dip;
+  struct superblock sb;
+
+  readsb(dev, &sb);
 
   for(inum = 1; inum < sb.ninodes; inum++){
-    bp = bread(dev, IBLOCK(inum, sb));
+    bp = bread(dev, IBLOCK(inum));
     dip = (struct dinode*)bp->data + inum%IPB;
     if(dip->type == 0){  // a free inode
       memset(dip, 0, sizeof(*dip));
@@ -202,7 +204,7 @@ iupdate(struct inode *ip)
   struct buf *bp;
   struct dinode *dip;
 
-  bp = bread(ip->dev, IBLOCK(ip->inum, sb));
+  bp = bread(ip->dev, IBLOCK(ip->inum));
   dip = (struct dinode*)bp->data + ip->inum%IPB;
   dip->type = ip->type;
   dip->major = ip->major;
@@ -279,7 +281,7 @@ ilock(struct inode *ip)
   release(&icache.lock);
 
   if(!(ip->flags & I_VALID)){
-    bp = bread(ip->dev, IBLOCK(ip->inum, sb));
+    bp = bread(ip->dev, IBLOCK(ip->inum));
     dip = (struct dinode*)bp->data + ip->inum%IPB;
     ip->type = dip->type;
     ip->major = dip->major;
diff --git a/fs.h b/fs.h
index e1d7d09..f191d43 100644
--- a/fs.h
+++ b/fs.h
@@ -1,23 +1,22 @@
 // On-disk file system format. 
 // Both the kernel and user programs use this header file.
 
+// Block 0 is unused.
+// Block 1 is super block.
+// Blocks 2 through sb.ninodes/IPB hold inodes.
+// Then free bitmap blocks holding sb.size bits.
+// Then sb.nblocks data blocks.
+// Then sb.nlog log blocks.
 
 #define ROOTINO 1  // root i-number
 #define BSIZE 512  // block size
 
-// Disk layout:
-// [ boot block | super block | log | inode blocks | free bit map | data blocks ]
-//
-// mkfs computes the super block and builds an initial file system. The super describes
-// the disk layout:
+// File system super block
 struct superblock {
   uint size;         // Size of file system image (blocks)
   uint nblocks;      // Number of data blocks
   uint ninodes;      // Number of inodes.
   uint nlog;         // Number of log blocks
-  uint logstart;     // Block number of first log block
-  uint inodestart;   // Block number of first inode block
-  uint bmapstart;    // Block number of first free map block
 };
 
 #define NDIRECT 12
@@ -38,13 +37,13 @@ struct dinode {
 #define IPB           (BSIZE / sizeof(struct dinode))
 
 // Block containing inode i
-#define IBLOCK(i, sb)     ((i) / IPB + sb.inodestart)
+#define IBLOCK(i)     ((i) / IPB + 2)
 
 // Bitmap bits per block
 #define BPB           (BSIZE*8)
 
-// Block of free map containing bit for block b
-#define BBLOCK(b, sb) (b/BPB + sb.bmapstart)
+// Block containing bit for block b
+#define BBLOCK(b, ninodes) (b/BPB + (ninodes)/IPB + 3)
 
 // Directory is a file containing a sequence of dirent structures.
 #define DIRSIZ 14
diff --git a/grep.c b/grep.c
index 28ff11a..2fbf5b6 100644
--- a/grep.c
+++ b/grep.c
@@ -14,9 +14,8 @@ grep(char *pattern, int fd)
   char *p, *q;
   
   m = 0;
-  while((n = read(fd, buf+m, sizeof(buf)-m-1)) > 0){
+  while((n = read(fd, buf+m, sizeof(buf)-m)) > 0){
     m += n;
-    buf[m] = '\0';
     p = buf;
     while((q = strchr(p, '\n')) != 0){
       *q = 0;
diff --git a/ide.c b/ide.c
index ed5a572..6850a09 100644
--- a/ide.c
+++ b/ide.c
@@ -9,10 +9,8 @@
 #include "x86.h"
 #include "traps.h"
 #include "spinlock.h"
-#include "fs.h"
 #include "buf.h"
 
-#define SECTOR_SIZE   512
 #define IDE_BSY       0x80
 #define IDE_DRDY      0x40
 #define IDE_DF        0x20
@@ -48,7 +46,7 @@ void
 ideinit(void)
 {
   int i;
-  
+
   initlock(&idelock, "ide");
   picenable(IRQ_IDE);
   ioapicenable(IRQ_IDE, ncpu - 1);
@@ -73,23 +71,17 @@ idestart(struct buf *b)
 {
   if(b == 0)
     panic("idestart");
-  if(b->blockno >= FSSIZE)
-    panic("incorrect blockno");
-  int sector_per_block =  BSIZE/SECTOR_SIZE;
-  int sector = b->blockno * sector_per_block;
 
-  if (sector_per_block > 7) panic("idestart");
-  
   idewait(0);
   outb(0x3f6, 0);  // generate interrupt
-  outb(0x1f2, sector_per_block);  // number of sectors
-  outb(0x1f3, sector & 0xff);
-  outb(0x1f4, (sector >> 8) & 0xff);
-  outb(0x1f5, (sector >> 16) & 0xff);
-  outb(0x1f6, 0xe0 | ((b->dev&1)<<4) | ((sector>>24)&0x0f));
+  outb(0x1f2, 1);  // number of sectors
+  outb(0x1f3, b->sector & 0xff);
+  outb(0x1f4, (b->sector >> 8) & 0xff);
+  outb(0x1f5, (b->sector >> 16) & 0xff);
+  outb(0x1f6, 0xe0 | ((b->dev&1)<<4) | ((b->sector>>24)&0x0f));
   if(b->flags & B_DIRTY){
     outb(0x1f7, IDE_CMD_WRITE);
-    outsl(0x1f0, b->data, BSIZE/4);
+    outsl(0x1f0, b->data, 512/4);
   } else {
     outb(0x1f7, IDE_CMD_READ);
   }
@@ -112,7 +104,7 @@ ideintr(void)
 
   // Read data if needed.
   if(!(b->flags & B_DIRTY) && idewait(1) >= 0)
-    insl(0x1f0, b->data, BSIZE/4);
+    insl(0x1f0, b->data, 512/4);
   
   // Wake process waiting for this buf.
   b->flags |= B_VALID;
diff --git a/kill.c b/kill.c
index 364f6af..5e60113 100644
--- a/kill.c
+++ b/kill.c
@@ -7,7 +7,7 @@ main(int argc, char **argv)
 {
   int i;
 
-  if(argc < 2){
+  if(argc < 1){
     printf(2, "usage: kill pid...\n");
     exit();
   }
diff --git a/log.c b/log.c
index 12db8ca..f519a8c 100644
--- a/log.c
+++ b/log.c
@@ -21,7 +21,7 @@
 //
 // The log is a physical re-do log containing disk blocks.
 // The on-disk log format:
-//   header block, containing block #s for block A, B, C, ...
+//   header block, containing sector #s for block A, B, C, ...
 //   block A
 //   block B
 //   block C
@@ -29,10 +29,10 @@
 // Log appends are synchronous.
 
 // Contents of the header block, used for both the on-disk header block
-// and to keep track in memory of logged block# before commit.
+// and to keep track in memory of logged sector #s before commit.
 struct logheader {
   int n;   
-  int block[LOGSIZE];
+  int sector[LOGSIZE];
 };
 
 struct log {
@@ -50,17 +50,17 @@ static void recover_from_log(void);
 static void commit();
 
 void
-initlog(int dev)
+initlog(void)
 {
   if (sizeof(struct logheader) >= BSIZE)
     panic("initlog: too big logheader");
 
   struct superblock sb;
   initlock(&log.lock, "log");
-  readsb(dev, &sb);
-  log.start = sb.logstart;
+  readsb(ROOTDEV, &sb);
+  log.start = sb.size - sb.nlog;
   log.size = sb.nlog;
-  log.dev = dev;
+  log.dev = ROOTDEV;
   recover_from_log();
 }
 
@@ -72,7 +72,7 @@ install_trans(void)
 
   for (tail = 0; tail < log.lh.n; tail++) {
     struct buf *lbuf = bread(log.dev, log.start+tail+1); // read log block
-    struct buf *dbuf = bread(log.dev, log.lh.block[tail]); // read dst
+    struct buf *dbuf = bread(log.dev, log.lh.sector[tail]); // read dst
     memmove(dbuf->data, lbuf->data, BSIZE);  // copy block to dst
     bwrite(dbuf);  // write dst to disk
     brelse(lbuf); 
@@ -89,7 +89,7 @@ read_head(void)
   int i;
   log.lh.n = lh->n;
   for (i = 0; i < log.lh.n; i++) {
-    log.lh.block[i] = lh->block[i];
+    log.lh.sector[i] = lh->sector[i];
   }
   brelse(buf);
 }
@@ -105,7 +105,7 @@ write_head(void)
   int i;
   hb->n = log.lh.n;
   for (i = 0; i < log.lh.n; i++) {
-    hb->block[i] = log.lh.block[i];
+    hb->sector[i] = log.lh.sector[i];
   }
   bwrite(buf);
   brelse(buf);
@@ -178,7 +178,7 @@ write_log(void)
 
   for (tail = 0; tail < log.lh.n; tail++) {
     struct buf *to = bread(log.dev, log.start+tail+1); // log block
-    struct buf *from = bread(log.dev, log.lh.block[tail]); // cache block
+    struct buf *from = bread(log.dev, log.lh.sector[tail]); // cache block
     memmove(to->data, from->data, BSIZE);
     bwrite(to);  // write the log
     brelse(from); 
@@ -219,10 +219,10 @@ log_write(struct buf *b)
 
   acquire(&log.lock);
   for (i = 0; i < log.lh.n; i++) {
-    if (log.lh.block[i] == b->blockno)   // log absorbtion
+    if (log.lh.sector[i] == b->sector)   // log absorbtion
       break;
   }
-  log.lh.block[i] = b->blockno;
+  log.lh.sector[i] = b->sector;
   if (i == log.lh.n)
     log.lh.n++;
   b->flags |= B_DIRTY; // prevent eviction
diff --git a/main.c b/main.c
index 40facc4..8a73c0f 100644
--- a/main.c
+++ b/main.c
@@ -31,6 +31,7 @@ main(void)
   tvinit();        // trap vectors
   binit();         // buffer cache
   fileinit();      // file table
+  iinit();         // inode cache
   ideinit();       // disk
   if(!ismp)
     timerinit();   // uniprocessor timer
diff --git a/memide.c b/memide.c
index 91b7f92..d2c5bb7 100644
--- a/memide.c
+++ b/memide.c
@@ -9,7 +9,6 @@
 #include "x86.h"
 #include "traps.h"
 #include "spinlock.h"
-#include "fs.h"
 #include "buf.h"
 
 extern uchar _binary_fs_img_start[], _binary_fs_img_size[];
@@ -21,7 +20,7 @@ void
 ideinit(void)
 {
   memdisk = _binary_fs_img_start;
-  disksize = (uint)_binary_fs_img_size/BSIZE;
+  disksize = (uint)_binary_fs_img_size/512;
 }
 
 // Interrupt handler.
@@ -45,15 +44,15 @@ iderw(struct buf *b)
     panic("iderw: nothing to do");
   if(b->dev != 1)
     panic("iderw: request not for disk 1");
-  if(b->blockno >= disksize)
-    panic("iderw: block out of range");
+  if(b->sector >= disksize)
+    panic("iderw: sector out of range");
 
-  p = memdisk + b->blockno*BSIZE;
+  p = memdisk + b->sector*512;
   
   if(b->flags & B_DIRTY){
     b->flags &= ~B_DIRTY;
-    memmove(p, b->data, BSIZE);
+    memmove(p, b->data, 512);
   } else
-    memmove(b->data, p, BSIZE);
+    memmove(b->data, p, 512);
   b->flags |= B_VALID;
 }
diff --git a/memlayout.h b/memlayout.h
index ce9cdeb..6a62cd7 100644
--- a/memlayout.h
+++ b/memlayout.h
@@ -19,4 +19,4 @@ static inline void *p2v(uint a) { return (void *) ((a) + KERNBASE); }
 #define P2V(a) (((void *) (a)) + KERNBASE)
 
 #define V2P_WO(x) ((x) - KERNBASE)    // same as V2P, but without casts
-#define P2V_WO(x) ((x) + KERNBASE)    // same as P2V, but without casts
+#define P2V_WO(x) ((x) + KERNBASE)    // same as V2P, but without casts
diff --git a/mkfs.c b/mkfs.c
index 0a10754..c168377 100644
--- a/mkfs.c
+++ b/mkfs.c
@@ -11,27 +11,20 @@
 #include "stat.h"
 #include "param.h"
 
-#ifndef static_assert
 #define static_assert(a, b) do { switch (0) case 0: case (a): ; } while (0)
-#endif
 
-#define NINODES 200
-
-// Disk layout:
-// [ boot block | sb block | log | inode blocks | free bit map | data blocks ]
-
-int nbitmap = FSSIZE/(BSIZE*8) + 1;
-int ninodeblocks = NINODES / IPB + 1;
-int nlog = LOGSIZE;  
-int nmeta;    // Number of meta blocks (boot, sb, nlog, inode, bitmap)
-int nblocks;  // Number of data blocks
+int nblocks = (995-LOGSIZE);
+int nlog = LOGSIZE;
+int ninodes = 200;
+int size = 1024;
 
 int fsfd;
 struct superblock sb;
-char zeroes[BSIZE];
-uint freeinode = 1;
+char zeroes[512];
 uint freeblock;
-
+uint usedblocks;
+uint bitblocks;
+uint freeinode = 1;
 
 void balloc(int);
 void wsect(uint, void*);
@@ -70,7 +63,7 @@ main(int argc, char *argv[])
   int i, cc, fd;
   uint rootino, inum, off;
   struct dirent de;
-  char buf[BSIZE];
+  char buf[512];
   struct dinode din;
 
 
@@ -81,8 +74,8 @@ main(int argc, char *argv[])
     exit(1);
   }
 
-  assert((BSIZE % sizeof(struct dinode)) == 0);
-  assert((BSIZE % sizeof(struct dirent)) == 0);
+  assert((512 % sizeof(struct dinode)) == 0);
+  assert((512 % sizeof(struct dirent)) == 0);
 
   fsfd = open(argv[1], O_RDWR|O_CREAT|O_TRUNC, 0666);
   if(fsfd < 0){
@@ -90,24 +83,21 @@ main(int argc, char *argv[])
     exit(1);
   }
 
-  // 1 fs block = 1 disk sector
-  nmeta = 2 + nlog + ninodeblocks + nbitmap;
-  nblocks = FSSIZE - nmeta;
-
-  sb.size = xint(FSSIZE);
-  sb.nblocks = xint(nblocks);
-  sb.ninodes = xint(NINODES);
+  sb.size = xint(size);
+  sb.nblocks = xint(nblocks); // so whole disk is size sectors
+  sb.ninodes = xint(ninodes);
   sb.nlog = xint(nlog);
-  sb.logstart = xint(2);
-  sb.inodestart = xint(2+nlog);
-  sb.bmapstart = xint(2+nlog+ninodeblocks);
 
-  printf("nmeta %d (boot, super, log blocks %u inode blocks %u, bitmap blocks %u) blocks %d total %d\n",
-         nmeta, nlog, ninodeblocks, nbitmap, nblocks, FSSIZE);
+  bitblocks = size/(512*8) + 1;
+  usedblocks = ninodes / IPB + 3 + bitblocks;
+  freeblock = usedblocks;
 
-  freeblock = nmeta;     // the first free block that we can allocate
+  printf("used %d (bit %d ninode %zu) free %u log %u total %d\n", usedblocks,
+         bitblocks, ninodes/IPB + 1, freeblock, nlog, nblocks+usedblocks+nlog);
 
-  for(i = 0; i < FSSIZE; i++)
+  assert(nblocks + usedblocks + nlog == size);
+
+  for(i = 0; i < nblocks + usedblocks + nlog; i++)
     wsect(i, zeroes);
 
   memset(buf, 0, sizeof(buf));
@@ -162,7 +152,7 @@ main(int argc, char *argv[])
   din.size = xint(off);
   winode(rootino, &din);
 
-  balloc(freeblock);
+  balloc(usedblocks);
 
   exit(0);
 }
@@ -170,24 +160,30 @@ main(int argc, char *argv[])
 void
 wsect(uint sec, void *buf)
 {
-  if(lseek(fsfd, sec * BSIZE, 0) != sec * BSIZE){
+  if(lseek(fsfd, sec * 512L, 0) != sec * 512L){
     perror("lseek");
     exit(1);
   }
-  if(write(fsfd, buf, BSIZE) != BSIZE){
+  if(write(fsfd, buf, 512) != 512){
     perror("write");
     exit(1);
   }
 }
 
+uint
+i2b(uint inum)
+{
+  return (inum / IPB) + 2;
+}
+
 void
 winode(uint inum, struct dinode *ip)
 {
-  char buf[BSIZE];
+  char buf[512];
   uint bn;
   struct dinode *dip;
 
-  bn = IBLOCK(inum, sb);
+  bn = i2b(inum);
   rsect(bn, buf);
   dip = ((struct dinode*)buf) + (inum % IPB);
   *dip = *ip;
@@ -197,11 +193,11 @@ winode(uint inum, struct dinode *ip)
 void
 rinode(uint inum, struct dinode *ip)
 {
-  char buf[BSIZE];
+  char buf[512];
   uint bn;
   struct dinode *dip;
 
-  bn = IBLOCK(inum, sb);
+  bn = i2b(inum);
   rsect(bn, buf);
   dip = ((struct dinode*)buf) + (inum % IPB);
   *ip = *dip;
@@ -210,11 +206,11 @@ rinode(uint inum, struct dinode *ip)
 void
 rsect(uint sec, void *buf)
 {
-  if(lseek(fsfd, sec * BSIZE, 0) != sec * BSIZE){
+  if(lseek(fsfd, sec * 512L, 0) != sec * 512L){
     perror("lseek");
     exit(1);
   }
-  if(read(fsfd, buf, BSIZE) != BSIZE){
+  if(read(fsfd, buf, 512) != 512){
     perror("read");
     exit(1);
   }
@@ -237,17 +233,17 @@ ialloc(ushort type)
 void
 balloc(int used)
 {
-  uchar buf[BSIZE];
+  uchar buf[512];
   int i;
 
   printf("balloc: first %d blocks have been allocated\n", used);
-  assert(used < BSIZE*8);
-  bzero(buf, BSIZE);
+  assert(used < 512*8);
+  bzero(buf, 512);
   for(i = 0; i < used; i++){
     buf[i/8] = buf[i/8] | (0x1 << (i%8));
   }
-  printf("balloc: write bitmap block at sector %d\n", sb.bmapstart);
-  wsect(sb.bmapstart, buf);
+  printf("balloc: write bitmap block at sector %zu\n", ninodes/IPB + 3);
+  wsect(ninodes / IPB + 3, buf);
 }
 
 #define min(a, b) ((a) < (b) ? (a) : (b))
@@ -258,35 +254,40 @@ iappend(uint inum, void *xp, int n)
   char *p = (char*)xp;
   uint fbn, off, n1;
   struct dinode din;
-  char buf[BSIZE];
+  char buf[512];
   uint indirect[NINDIRECT];
   uint x;
 
   rinode(inum, &din);
+
   off = xint(din.size);
-  // printf("append inum %d at off %d sz %d\n", inum, off, n);
   while(n > 0){
-    fbn = off / BSIZE;
+    fbn = off / 512;
     assert(fbn < MAXFILE);
     if(fbn < NDIRECT){
       if(xint(din.addrs[fbn]) == 0){
         din.addrs[fbn] = xint(freeblock++);
+        usedblocks++;
       }
       x = xint(din.addrs[fbn]);
     } else {
       if(xint(din.addrs[NDIRECT]) == 0){
+        // printf("allocate indirect block\n");
         din.addrs[NDIRECT] = xint(freeblock++);
+        usedblocks++;
       }
+      // printf("read indirect block\n");
       rsect(xint(din.addrs[NDIRECT]), (char*)indirect);
       if(indirect[fbn - NDIRECT] == 0){
         indirect[fbn - NDIRECT] = xint(freeblock++);
+        usedblocks++;
         wsect(xint(din.addrs[NDIRECT]), (char*)indirect);
       }
       x = xint(indirect[fbn-NDIRECT]);
     }
-    n1 = min(n, (fbn + 1) * BSIZE - off);
+    n1 = min(n, (fbn + 1) * 512 - off);
     rsect(x, buf);
-    bcopy(p, buf + off - (fbn * BSIZE), n1);
+    bcopy(p, buf + off - (fbn * 512), n1);
     wsect(x, buf);
     n -= n1;
     off += n1;
diff --git a/param.h b/param.h
index a7e90ef..8e007ca 100644
--- a/param.h
+++ b/param.h
@@ -8,7 +8,6 @@
 #define ROOTDEV       1  // device number of file system root disk
 #define MAXARG       32  // max exec arguments
 #define MAXOPBLOCKS  10  // max # of blocks any FS op writes
-#define LOGSIZE      (MAXOPBLOCKS*3)  // max data blocks in on-disk log
+#define LOGSIZE      (MAXOPBLOCKS*3)  // max data sectors in on-disk log
 #define NBUF         (MAXOPBLOCKS*3)  // size of disk block cache
-#define FSSIZE       1000  // size of file system in blocks
 
diff --git a/proc.c b/proc.c
index fee4e95..a642f5a 100644
--- a/proc.c
+++ b/proc.c
@@ -266,16 +266,11 @@ void
 scheduler(void)
 {
   struct proc *p;
-  int foundproc = 1;
 
   for(;;){
     // Enable interrupts on this processor.
     sti();
 
-    if (!foundproc) hlt();
-
-    foundproc = 0;
-
     // Loop over process table looking for process to run.
     acquire(&ptable.lock);
     for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
@@ -285,7 +280,6 @@ scheduler(void)
       // Switch to chosen process.  It is the process's job
       // to release ptable.lock and then reacquire it
       // before jumping back to us.
-      foundproc = 1;
       proc = p;
       switchuvm(p);
       p->state = RUNNING;
@@ -345,8 +339,7 @@ forkret(void)
     // of a regular process (e.g., they call sleep), and thus cannot 
     // be run from main().
     first = 0;
-    iinit(ROOTDEV);
-    initlog(ROOTDEV);
+    initlog();
   }
   
   // Return to "caller", actually trapret (see allocproc).
diff --git a/sign.pl b/sign.pl
old mode 100755
new mode 100644
diff --git a/syscall.c b/syscall.c
index 799ebc2..f89eada 100644
--- a/syscall.c
+++ b/syscall.c
@@ -98,6 +98,7 @@ extern int sys_unlink(void);
 extern int sys_wait(void);
 extern int sys_write(void);
 extern int sys_uptime(void);
+extern int sys_date(void);
 
 static int (*syscalls[])(void) = {
 [SYS_fork]    sys_fork,
@@ -121,8 +122,36 @@ static int (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_date]    sys_date,
 };
 
+
+// Used for HW Part 1
+// static char* syscallnames[] = {
+// [SYS_fork]    "fork",
+// [SYS_exit]    "exit",
+// [SYS_wait]    "wait",
+// [SYS_pipe]    "pipe",
+// [SYS_read]    "read",
+// [SYS_kill]    "kill",
+// [SYS_exec]    "exec",
+// [SYS_fstat]   "fstat",
+// [SYS_chdir]   "chdir",
+// [SYS_dup]     "dup",
+// [SYS_getpid]  "getpid",
+// [SYS_sbrk]    "sbrk",
+// [SYS_sleep]   "sleep",
+// [SYS_uptime]  "uptime",
+// [SYS_open]    "open",
+// [SYS_write]   "write",
+// [SYS_mknod]   "mknod",
+// [SYS_unlink]  "unlink",
+// [SYS_link]    "link",
+// [SYS_mkdir]   "mkdir",
+// [SYS_close]   "close",
+// [SYS_date]    "date",
+// };
+
 void
 syscall(void)
 {
@@ -131,6 +160,8 @@ syscall(void)
   num = proc->tf->eax;
   if(num > 0 && num < NELEM(syscalls) && syscalls[num]) {
     proc->tf->eax = syscalls[num]();
+    // Used for HW Part 1
+    // cprintf("%s: %d\n", syscallnames[num], num);
   } else {
     cprintf("%d %s: unknown sys call %d\n",
             proc->pid, proc->name, num);
diff --git a/syscall.h b/syscall.h
index bc5f356..71700e5 100644
--- a/syscall.h
+++ b/syscall.h
@@ -20,3 +20,5 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+// New Interupt code for date
+#define SYS_date   22
diff --git a/sysproc.c b/sysproc.c
index 027a5e5..5e2fb9f 100644
--- a/sysproc.c
+++ b/sysproc.c
@@ -89,3 +89,17 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+// System call to get UTC Date and convert it to ETC
+int 
+sys_date(void)
+{
+  
+  struct rtcdate *d;
+  if (argptr(0, (void*)&d, sizeof(&d)) < 0)
+    return -1;
+
+  cmostime(d);
+
+  return 0;
+}
diff --git a/user.h b/user.h
index f45b8d5..970f200 100644
--- a/user.h
+++ b/user.h
@@ -24,6 +24,9 @@ char* sbrk(int);
 int sleep(int);
 int uptime(void);
 
+// New System Call for Assignment
+int date(struct rtcdate*);
+
 // ulib.c
 int stat(char*, struct stat*);
 char* strcpy(char*, char*);
diff --git a/usys.S b/usys.S
index 8bfd8a1..ba76d54 100644
--- a/usys.S
+++ b/usys.S
@@ -29,3 +29,4 @@ SYSCALL(getpid)
 SYSCALL(sbrk)
 SYSCALL(sleep)
 SYSCALL(uptime)
+SYSCALL(date)
diff --git a/vectors.pl b/vectors.pl
old mode 100755
new mode 100644
diff --git a/x86.h b/x86.h
index 7d14145..3949900 100644
--- a/x86.h
+++ b/x86.h
@@ -117,12 +117,6 @@ sti(void)
   asm volatile("sti");
 }
 
-static inline void
-hlt(void)
-{
-  asm volatile("hlt");
-}
-
 static inline uint
 xchg(volatile uint *addr, uint newval)
 {
-- 
2.17.1 (Apple Git-112)

